// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (id, created_at, updated_at, name, quantity, user_id, category_id) 
VALUES ($1, $2, $3, $4, $5,$6, $7)
RETURNING id, created_at, updated_at, name, quantity, user_id, category_id
`

type CreateProductParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Name       string
	Quantity   int32
	UserID     uuid.UUID
	CategoryID uuid.UUID
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Quantity,
		arg.UserID,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Quantity,
		&i.UserID,
		&i.CategoryID,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :many
SELECT id, created_at, updated_at, name, quantity, user_id, category_id FROM product
`

func (q *Queries) GetProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Quantity,
			&i.UserID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, created_at, updated_at, name, quantity, user_id, category_id FROM product WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Quantity,
		&i.UserID,
		&i.CategoryID,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product 
SET updated_at = NOW(), 
name = $1,
quantity = $2
WHERE id = $3
RETURNING id, created_at, updated_at, name, quantity, user_id, category_id
`

type UpdateProductParams struct {
	Name     string
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.Name, arg.Quantity, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Quantity,
		&i.UserID,
		&i.CategoryID,
	)
	return i, err
}
