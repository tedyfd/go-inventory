// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (id, created_at, updated_at, name, quantity, user_id, seller_id, category_id) 
VALUES ($1, $2, $3, $4, $5,$6, $7, $8)
RETURNING id, created_at, updated_at, name, quantity, user_id, seller_id, category_id
`

type CreateProductParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Name       string
	Quantity   int32
	UserID     uuid.UUID
	SellerID   uuid.UUID
	CategoryID uuid.UUID
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Quantity,
		arg.UserID,
		arg.SellerID,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Quantity,
		&i.UserID,
		&i.SellerID,
		&i.CategoryID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :many
SELECT product.id, 
	product.name, 
	product.quantity,
	product.created_at, 
	product.updated_at, 
	category.name as category_name,
	seller.name as seller_name,
	users.name as user_name
	FROM product
INNER JOIN category ON product.category_id = category.id
INNER JOIN seller ON product.seller_id = seller.id
INNER JOIN users ON product.user_id = users.id
`

type GetProductRow struct {
	ID           uuid.UUID
	Name         string
	Quantity     int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
	CategoryName string
	SellerName   string
	UserName     string
}

func (q *Queries) GetProduct(ctx context.Context) ([]GetProductRow, error) {
	rows, err := q.db.QueryContext(ctx, getProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductRow
	for rows.Next() {
		var i GetProductRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryName,
			&i.SellerName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT product.id, created_at, updated_at, product.name, quantity, user_id, seller_id, category_id, category.id, category.name, description FROM product
INNER JOIN category ON product.category_id = category.id
WHERE product.id = $1
`

type GetProductByIDRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Quantity    int32
	UserID      uuid.UUID
	SellerID    uuid.UUID
	CategoryID  uuid.UUID
	ID_2        uuid.UUID
	Name_2      string
	Description sql.NullString
}

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (GetProductByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Quantity,
		&i.UserID,
		&i.SellerID,
		&i.CategoryID,
		&i.ID_2,
		&i.Name_2,
		&i.Description,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product 
SET updated_at = NOW(), 
name = $1,
quantity = $2
WHERE id = $3
RETURNING id, created_at, updated_at, name, quantity, user_id, seller_id, category_id
`

type UpdateProductParams struct {
	Name     string
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.Name, arg.Quantity, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Quantity,
		&i.UserID,
		&i.SellerID,
		&i.CategoryID,
	)
	return i, err
}
