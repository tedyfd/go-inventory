// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: seller.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSeller = `-- name: CreateSeller :one
INSERT INTO seller (
    id, created_at, updated_at, name
    ) 
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name
`

type CreateSellerParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateSeller(ctx context.Context, arg CreateSellerParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, createSeller,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteSeller = `-- name: DeleteSeller :exec
DELETE FROM seller WHERE id=$1
`

func (q *Queries) DeleteSeller(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSeller, id)
	return err
}

const getSeller = `-- name: GetSeller :many
SELECT id, created_at, updated_at, name FROM seller
`

func (q *Queries) GetSeller(ctx context.Context) ([]Seller, error) {
	rows, err := q.db.QueryContext(ctx, getSeller)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seller
	for rows.Next() {
		var i Seller
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSellerByName = `-- name: GetSellerByName :one
SELECT id, created_at, updated_at, name FROM seller WHERE name=$1
`

func (q *Queries) GetSellerByName(ctx context.Context, name string) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSellerByName, name)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const updateSeller = `-- name: UpdateSeller :one
UPDATE seller SET
name = $1,
updated_at = $2
WHERE id = $3
RETURNING id, created_at, updated_at, name
`

type UpdateSellerParams struct {
	Name      string
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateSeller(ctx context.Context, arg UpdateSellerParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, updateSeller, arg.Name, arg.UpdatedAt, arg.ID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
